#---------------------------------------------------------------
# file:     ~/.tmux/conf
# author:   jason ryan - http://jasonwryan.com/
# vim:fenc=utf-8:nu:ai:si:et:ts=4:sw=4:fdm=indent:fdn=1:ft=conf:
#---------------------------------------------------------------
# Based on Thayer Williams' (http://cinderwick.ca)

# set correct term
set -g default-terminal screen-256color
# set -g default-terminal rxvt-unicode
# set -g default-terminal rxvt-256color
# set -g default-terminal xterm-256color
# set -g default-terminal xterm-screen-256color
## determine if we should enable 256-colour support
# if "[[ ${TERM} =~ 256color || ${TERM} == fbterm ]]" 'set -g default-terminal screen-256color' 'set -g default-terminal screen'

# fix clicpboard in mac, you should install reattach-to-user-namespace via
# 'brew install reattach-to-user-namespace'
if "[ \"$(uname)\" == \"Darwin\" ] && (hash reattach-to-user-namespace &>/dev/null)" 'set-option -g default-command "reattach-to-user-namespace -l bash"'

# set prefix key to ctrl+t
#unbind C-a
#set -g prefix C-a
#bind a send-prefix

# bind <C-`> for prefix key
# in xterm, you can also press <C-space> to trigger it.
unbind C-b
set -g prefix C-space
bind C-space send-prefix

# reload config without killing server
bind R source-file ~/.tmux.conf \; display-message "  Config reloaded..".

# more intuitive keybindings for splitting
# split windows like vim
# vim's definition of a horizontal/vertical split is reversed from tmux's
bind s split-window -v -c "#{pane_current_path}"
bind v split-window -h -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

# move around panes with hjkl, as one would in vim after pressing ctrl-w
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

bind J swap-pane -D
bind K swap-pane -U

# resize panes like vim
# feel free to change the "1" to however many lines you want to resize by, only
# one at a time can be slow
bind < resize-pane -L 1
bind > resize-pane -R 1
bind - resize-pane -D 1
bind + resize-pane -U 1

# bind : to command-prompt like vim
# this is the default in tmux already
bind : command-prompt

# vi-style controls for copy mode
setw -g mode-keys vi

bind-key -t vi-copy 'v' begin-selection
bind-key -t vi-copy 'y' copy-selection

# copy tmux buffer to clipboard
if "[ \"$(uname)\" == \"Darwin\" ]" 'bind-key C-y run "tmux show-buffer | pbcopy"'
if "[ \"$(expr substr $(uname -s) 1 5)\" == \"Linux\" ]" 'bind-key C-y run "tmux show-buffer | xsel -ib"'

# move x clipboard into tmux paste buffer
# bind-key C-p run "tmux save-buffer -- \"$(xsel -ob)\"; tmux paste-buffer"
if "[ \"$(uname)\" == \"Darwin\" ]" 'bind-key C-p run "pbpaste | tmux loadb -; tmux paste-buffer"'
if "[ \"$(expr substr $(uname -s) 1 5)\" == \"Linux\" ]" 'bind-key C-p run "xsel -ob | tmux loadb -; tmux paste-buffer"'

# quick view of processes
bind-key '~' split-window "exec htop"

# open {tmux,mutt,vim} man page
bind-key T neww -n "Tmux manual" "exec man tmux"
bind-key M neww -n "Mutt manual" "exec man mutt"
bind-key V neww -n "Vim manual" "exec vim -c 'h user-manual|only'"

# open %% man page
bind-key C-m command-prompt -p "Open man page for:" "new-window 'exec man %%'"

# send the prefix to client inside window (ala nested sessions)
bind-key -n C-i send-prefix

# toggle last window like screen
bind-key C-b last-window

# display panes in number
bind-key m display-panes

# confirm before killing a window or the server
bind-key q confirm kill-window
bind-key Q confirm kill-server

# toggle statusbar
bind-key b set-option status

# ctrl+left/right cycles thru windows
bind-key -n C-right next
bind-key -n C-left prev

# scrollback buffer n lines
set -g history-limit 5000

# listen for activity on all windows
set -g bell-action any

# on-screen time for display-panes in ms
set -g display-panes-time 2000

# start window indexing at one instead of zero
set -g base-index 1

# enable wm window titles
set -g set-titles on

# enable auto renaming
setw -g automatic-rename on

# border colours
set -g pane-border-fg magenta
set -g pane-active-border-fg green
set -g pane-active-border-bg default

# wm window title string (uses statusbar variables)
set -g set-titles-string "tmux:#I [ #W ]"

# environment
## update the TERM variable of terminal emulator when creating a new session or attaching a existing session
set -g update-environment "DISPLAY SSH_ASKPASS SSH_AUTH_SOCK SSH_AGENT_PID SSH_CONNECTION WINDOWID XAUTHORITY TERM"

# statusbar --------------------------------------------------------------
set -g window-status-format "#{?window_zoomed_flag,#I-Z,#I}:#W"
set -g window-status-current-format "#{?window_zoomed_flag,#I-Z,#I}:#W"

set -g status-keys vi
bind-key -t vi-edit Up history-up
bind-key -t vi-edit Down history-down

set-option -g status-left "[#S:#I,#P]"
set -g status-interval 1
set -g status-justify centre # center align window list

# default statusbar colors
set -g status-fg white
set -g status-bg default

# default window title colors
set-window-option -g window-status-fg black
set-window-option -g window-status-bg default
set-window-option -g window-status-attr bright

# active window title colors
set-window-option -g window-status-current-fg white
set-window-option -g window-status-current-bg default
set-window-option -g window-status-current-attr bright

# enable xterm-keys
set-window-option -g xterm-keys

# command/message line colors
set -g message-fg white
set -g message-bg black
set -g message-attr bright

# set mouse scroll
# set -g mode-mouse on

# set ESC key delay
set -s escape-time 0
# set timeout timeoutlen=1000 ttimeoutlen=100
# set scrollbar
set -g terminal-overrides 'xterm*:smcup@:rmcup@'

# unbind keys
unbind-key -n Tab

#unbind =
#bind = new-window -d -n tmux-zoom 'clear && echo TMUX ZOOM && read' \; swap-pane -s tmux-zoom.0 \; select-window -t tmux-zoom
#unbind -
#bind - last-window \; swap-pane -s tmux-zoom.0 \; kill-window -t tmux-zoom
bind Space resize-pane -Z


# vim-tmux
#bind -n M-h run "(tmux display-message -p '#{pane_title}' | grep -iq vim && tmux send-keys h) || tmux select-pane -L"
#bind -n M-j run "(tmux display-message -p '#{pane_title}' | grep -iq vim && tmux send-keys j) || tmux select-pane -D"
#bind -n M-k run "(tmux display-message -p '#{pane_title}' | grep -iq vim && tmux send-keys k) || tmux select-pane -U"
#bind -n M-l run "(tmux display-message -p '#{pane_title}' | grep -iq vim && tmux send-keys l) || tmux select-pane -R"
#bind -n C-h run "(tmux display-message -p '#{pane_title}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
#bind -n C-j run "(tmux display-message -p '#{pane_title}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
#bind -n C-k run "(tmux display-message -p '#{pane_title}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
#bind -n C-l run "(tmux display-message -p '#{pane_title}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"

#bind -n C-h run "(tmux display-message -p '#{pane_title}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
#bind -n C-j run "(tmux display-message -p '#{pane_title}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
#bind -n C-k run "(tmux display-message -p '#{pane_title}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
#bind -n C-l run "(tmux display-message -p '#{pane_title}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"


# the content of tmux-choose-pane.sh
#> #!/bin/bash
#>
#> if [[ $# -le 0 ]];then
#>     current_session=$(tmux display-message -p '#S')
#>     #current_session=$(tmux list-pane -F '#S' | awk 'END{print}')
#>     tmux_panes=$(tmux list-pane -s -t $current_session -F '#{session_name}:#{window_index}.#{pane_index}: #{window_name}: #{pane_title}' | awk '{printf $0 ","}');
#>     tmux choose-list -l "$tmux_panes" 'run "tmux-choose-pane.sh \"%%\""'
#> else
#>     tmux select-pane -t ${1//: */}
#>     tmux select-window -t ${1//.*/}
#> fi

bind-key '~' run "tmux-choose-pane.sh"
